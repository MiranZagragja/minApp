{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["service","EnturService","clientName","now","Date","toTimeString","date","hour","String","getHours","padStart","minute","getMinutes","concat","minutesDifference","date1","date2","timeDiff","Math","abs","getTime","floor","_callee","departures","id","data","rawFile","sjekker","lineArr","regenerator_default","a","wrap","_context","prev","next","getStopPlaceDepartures","sent","XMLHttpRequest","open","onreadystatechange","readyState","status","responseText","send","split","forEach","departure","minutes","realtime","expectedDepartureTime","destinationDisplay","serviceJourney","aimedDepartureTime","line","journeyPattern","frontText","departureTime","realDep","minDiff","departureLabel","diff","avlos","i","length","enkelt","$","html","publicCode","document","getElementById","err","stop","example","App","react_default","createElement","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAKMA,SAAU,IAAIC,IAAa,CAAEC,WAAY,mBACzCC,EAAM,IAAIC,KAChB,SAASC,EAAaC,GACpB,IAAMC,EAAOC,OAAOF,EAAKG,YAAYC,SAAS,EAAG,KAC3CC,EAASH,OAAOF,EAAKM,cAAcF,SAAS,EAAG,KACrD,SAAAG,OAAUN,EAAV,KAAAM,OAAkBF,GAGpB,SAASG,EAAkBC,EAAOC,GAChC,IAAMC,EAAWC,KAAKC,IAAIH,EAAMI,UAAYL,EAAMK,WAClD,OAAOF,KAAKG,MAAMJ,EAAQ,gDAM5B,SAAAK,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC2BlC,EAAQmC,uBAAuB,sBAD1D,OACQZ,EADRS,EAAAI,KAEMZ,EAAK,EACLC,EAAO,KACPC,EAAU,IAAIW,eACdV,GAAU,EACdD,EAAQY,KAAK,MAAO,eAAe,GACnCZ,EAAQa,mBAAqB,WACA,IAAvBb,EAAQc,aACa,MAAnBd,EAAQe,QAAqC,IAAnBf,EAAQe,SACpChB,EAAOC,EAAQgB,gBAKrBhB,EAAQiB,KAAK,MACTf,EAAUH,EAAKmB,MAAM,MAEzBrB,EAAWsB,QAAQ,SAACC,GAGlB,GAFAnB,GAAU,EAEC,IAAPH,EAAJ,CAHgC,IAtBVuB,EA0BdC,EAA4FF,EAA5FE,SAAUC,EAAkFH,EAAlFG,sBAAuBC,EAA2DJ,EAA3DI,mBAAoBC,EAAuCL,EAAvCK,eAAgBC,EAAuBN,EAAvBM,mBACrEC,EAASF,EAAeG,eAAxBD,KAER,GAAqC,sBAAjCH,EAAmBK,UAAmC,CASxD,IARA,IAAMC,EAAgB,IAAIpD,KAAK6C,GACzBQ,EAAU,IAAIrD,KAAKgD,GACnBM,EAAU5C,EAAkBX,EAAKqD,GACjCG,EAAiBD,EAAU,GAAV,GAAA7C,OAAkB6C,EAAlB,QAAkCrD,EAAamD,GAEhEI,GAAQ9C,EAAkB0C,EAAeC,GAC3CI,GApCgBd,EAoCY,EAnC7B,IAAI3C,KAmCgBqD,EAnCNrC,UAAsB,IAAV2B,IAqCpBe,EAAI,EAAGA,EAAIlC,EAAQmC,OAAQD,IAAK,CACvC,IAAIE,EAASpC,EAAQkC,GAAGlB,MAAM,KAEV,QAAdoB,EAAO,IAELA,EAAO,KAAO3D,EAAawD,KAC7BI,IAAE,OAASzC,GAAI0C,KAAKF,EAAO,IAC3BrC,GAAU,GAQlB,GAAIA,EAAS,CAQX,GAJAsC,IAAE,OAASzC,GAAI0C,KAAwB,UAAnBP,EAA6B,QAAOA,GACxDM,IAAE,OAASzC,GAAI0C,KAAKN,GACpBK,IAAE,OAASzC,GAAI0C,KAAKb,EAAKc,YACzBF,IAAE,QAAUzC,GAAI0C,KAAKhB,EAAmBK,WACpCP,EACF,IACEoB,SAASC,eAAT,MAAAxD,OAA8BW,IAAMA,GAAK,MACzC,MAAO8C,IAEX9C,SA9DR,yBAAAQ,EAAAuC,SAAAjD,iEA8IAkD,OAsBeC,mLAZX,OACEC,EAAA5C,EAAA6C,cAAA,OAAKC,UAAU,eAHHC,aC/JEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAA5C,EAAA6C,cAACU,EAAD,MAASjB,SAASC,eAAe,SD2H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bd08c33d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport EnturService from '@entur/sdk'\nimport $ from 'jquery';\nimport './App.css';\n\nconst service = new EnturService({ clientName: 'miran-trikken' })\nconst now = new Date()\nfunction toTimeString(date) {\n  const hour = String(date.getHours()).padStart(2, '0')\n  const minute = String(date.getMinutes()).padStart(2, '0')\n  return `${hour}:${minute}`\n}\n\nfunction minutesDifference(date1, date2) {\n  const timeDiff = Math.abs(date2.getTime() - date1.getTime())\n  return Math.floor(timeDiff / (1000 * 60))\n}\nfunction addMinutes(date, minutes) {\n  return new Date(date.getTime() + minutes * 60000);\n}\n\nasync function example() {\n  const departures = await service.getStopPlaceDepartures('NSR:StopPlace:6060')\n  var id = 1;\n  var data = null;\n  var rawFile = new XMLHttpRequest();\n  var sjekker = false;\n  rawFile.open(\"GET\", 'hverdag.txt', false);\n  rawFile.onreadystatechange = function kallDenne() {\n    if (rawFile.readyState === 4) {\n      if (rawFile.status === 200 || rawFile.status === 0) {\n        data = rawFile.responseText\n\n      }\n    }\n  }\n  rawFile.send(null);\n  var lineArr = data.split(\"\\n\")\n\n  departures.forEach((departure) => {\n    sjekker = false;\n\n    if (id === 8) { return; }\n    const { realtime, expectedDepartureTime, destinationDisplay, serviceJourney, aimedDepartureTime } = departure\n    const { line } = serviceJourney.journeyPattern\n\n    if (destinationDisplay.frontText === \"Storo-Grefsen st.\") {\n      const departureTime = new Date(expectedDepartureTime)\n      const realDep = new Date(aimedDepartureTime)\n      const minDiff = minutesDifference(now, departureTime)\n      const departureLabel = minDiff < 15 ? `${minDiff} min` : toTimeString(departureTime)\n\n      const diff = -minutesDifference(departureTime, realDep)\n      var avlos = addMinutes(realDep, 2)\n\n      for (var i = 0; i < lineArr.length; i++) {\n        var enkelt = lineArr[i].split(' ')\n        \n          if (enkelt[1] === 'Gf4') {\n\n            if (enkelt[2] === toTimeString(avlos)) {\n              $('#typ' + id).html(enkelt[0])\n              sjekker = true;\n            }\n          }\n        \n      }\n\n\n\n      if (sjekker) {\n\n      \n\n        $('#tid' + id).html(departureLabel === '0 min' ? 'Nå' : departureLabel)\n        $('#for' + id).html(diff)\n        $('#lin' + id).html(line.publicCode)\n        $('#dest' + id).html(destinationDisplay.frontText)\n        if (realtime) {\n          try {\n            document.getElementById(`san${id}`).id = 'san'\n          } catch (err) { }\n        } //What if realtime drops down in a sudden, and it stills shows green for realtime?\n        id++;\n      }\n    }\n  })\n}\n\n\n\n/*\nasync function gf_En() {\n  const departures = await service.getStopPlaceDepartures('NSR:StopPlace:6050')\n  var id = 1;\n  var data = null;\n  var rawFile = new XMLHttpRequest();\n  var sjekker = false;\n\n  rawFile.open(\"GET\", 'hverdag.txt', false);\n  rawFile.onreadystatechange = function kallDenne() {\n    if (rawFile.readyState === 4) {\n      if (rawFile.status === 200 || rawFile.status === 0) {\n        data = rawFile.responseText\n\n      }\n    }\n  }\n  rawFile.send(null);\n  var lineArr = data.split(\"\\n\")\n\n  departures.forEach((departure) => {\n    sjekker = false;\n\n    if (id === 8) { return; }\n    const { realtime, expectedDepartureTime, destinationDisplay, serviceJourney, aimedDepartureTime } = departure\n    const { line } = serviceJourney.journeyPattern\n    if (destinationDisplay.frontText === \"Bekkestua\") {\n      const departureTime = new Date(expectedDepartureTime)\n      const realDep = new Date(aimedDepartureTime)\n      const minDiff = minutesDifference(now, departureTime)\n      const departureLabel = minDiff < 15 ? `${minDiff} min` : toTimeString(departureTime)\n\n      const diff = -minutesDifference(departureTime, realDep)\n\n      for (var i = 0; i < lineArr.length; i++) {\n        var enkelt = lineArr[i].split(' ')\n        for (var j = 0; j < enkelt.length; j++) {\n          if (enkelt[4] === 'Gf1') {\n            if (enkelt[3] === toTimeString(realDep)) {\n              $('#1typ' + id).html(enkelt[0])\n              sjekker = true;\n            }\n          }\n        }\n      }\n\n\n\n      if (sjekker) {\n\n        $('#1tid' + id).html(departureLabel === '0 min' ? 'Nå' : departureLabel)\n        $('#1for' + id).html(diff)\n        $('#1lin' + id).html(line.publicCode)\n        $('#1dest' + id).html(destinationDisplay.frontText)\n        if (realtime) {\n          try {\n            document.getElementById(`1san${id}`).id = 'san'\n          } catch (err) { }\n        } //What if realtime drops down in a sudden, and it stills shows green for realtime?\n        id++;\n      }\n    }\n  })\n}\n\n*/\n\n\n\n\n\n\nexample();\n\n\n\n\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n      </div>\n\n\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}